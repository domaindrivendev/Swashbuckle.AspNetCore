<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Swashbuckle.AspNetCore.ReDoc.snk</AssemblyOriginatorKeyFile>
    <Description>Middleware to expose an embedded version of Redoc from an ASP.NET Core application</Description>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <IsPackable>true</IsPackable>
    <NoWarn>$(NoWarn);1591</NoWarn>
    <PackageTags>swagger;documentation;discovery;help;webapi;aspnet;aspnetcore;redoc</PackageTags>
    <SignAssembly>true</SignAssembly>
    <TargetFrameworks>net9.0;net8.0;netstandard2.0</TargetFrameworks>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0'))">
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    <IsAotCompatible>true</IsAotCompatible>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="index.css" />
    <None Remove="index.js" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="index.css" />
    <EmbeddedResource Include="index.html" />
    <EmbeddedResource Include="index.js" />
    <EmbeddedResource Include="node_modules/redoc/bundles/redoc.standalone.js" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="Microsoft.AspNetCore.Routing" />
    <PackageReference Include="Microsoft.AspNetCore.StaticFiles" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" />
    <PackageReference Include="System.Text.Json" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' != 'netstandard2.0' ">
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" PrivateAssets="All" />
    <AdditionalFiles Include="PublicAPI\PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI\PublicAPI.Unshipped.txt" />
  </ItemGroup>
  <PropertyGroup>
    <_TargetFrameworkIdentifier>$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)'))</_TargetFrameworkIdentifier>
  </PropertyGroup>
  <ItemGroup Condition="Exists('PublicAPI\$(_TargetFrameworkIdentifier)')">
    <AdditionalFiles Include="PublicAPI\$(_TargetFrameworkIdentifier)\PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI\$(_TargetFrameworkIdentifier)\PublicAPI.Unshipped.txt" />
  </ItemGroup>

  <Target Name="NpmInstall" BeforeTargets="DispatchToInnerBuilds" Condition=" '$(CI)' != '' OR !Exists('$(MSBuildThisFileDirectory)\node_modules') ">
    <Exec Command="npm install" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js/npm is required to build this project." />
  </Target>

  <!-- Embed the ReDoc version into the [AssemblyMetadata] attributes -->
  <UsingTask TaskName="GetReDocVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <PackageJsonPath ParameterType="System.String" Required="true" />
      <ReDocVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        var packageJson = System.IO.File.ReadAllText(PackageJsonPath);
        var pattern = @"""redoc"":\s*""([^""]+)""";
        var match = System.Text.RegularExpressions.Regex.Match(packageJson, pattern);
        ReDocVersion = match.Groups[1].Value;
   ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="AddCustomAssemblyMetadata" BeforeTargets="GetAssemblyAttributes">
    <GetReDocVersion PackageJsonPath="$(MSBuildThisFileDirectory)\package.json">
      <Output TaskParameter="ReDocVersion" PropertyName="ReDocVersion" />
    </GetReDocVersion>
    <ItemGroup>
      <AssemblyMetadata Include="ReDocVersion" Value="$(ReDocVersion)" />
    </ItemGroup>
  </Target>

</Project>
