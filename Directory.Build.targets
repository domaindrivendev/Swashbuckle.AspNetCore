<Project>
  <PropertyGroup Condition=" '$(IsTestProject)' != 'true' AND ($(MSBuildProjectDirectory.EndsWith('Test')) OR $(MSBuildProjectDirectory.EndsWith('Tests'))) ">
    <IsTestProject>true</IsTestProject>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(IsTestProject)' == 'true' AND '$(BuildingInsideVisualStudio)' != 'true' ">
    <CollectCoverage>true</CollectCoverage>
  </PropertyGroup>
  <ItemGroup Condition=" '$(IsTestProject)' == 'true' ">
    <PackageReference Include="coverlet.msbuild" PrivateAssets="All" />
    <PackageReference Include="GitHubActionsTestLogger" PrivateAssets="All" />
    <PackageReference Include="JunitXml.TestLogger" PrivateAssets="All" />
    <PackageReference Include="ReportGenerator" PrivateAssets="All" />
  </ItemGroup>
  <PropertyGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <CoverletOutput>$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage', 'coverage'))</CoverletOutput>
    <ReportGeneratorOutputMarkdown Condition=" '$(ReportGeneratorOutputMarkdown)' == '' AND '$(GITHUB_SHA)' != '' ">true</ReportGeneratorOutputMarkdown>
    <ReportGeneratorReportTypes>HTML</ReportGeneratorReportTypes>
    <ReportGeneratorReportTypes Condition=" '$(ReportGeneratorOutputMarkdown)' == 'true' ">$(ReportGeneratorReportTypes);MarkdownSummaryGitHub</ReportGeneratorReportTypes>
    <ReportGeneratorTargetDirectory>$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage'))</ReportGeneratorTargetDirectory>
    <ReportGeneratorMarkdownSummary>$([System.IO.Path]::Combine($(ReportGeneratorTargetDirectory), 'SummaryGithub.md'))</ReportGeneratorMarkdownSummary>
    <MergeWith>$([System.IO.Path]::Combine($(ReportGeneratorTargetDirectory), 'coverage.json'))</MergeWith>
  </PropertyGroup>
  <UsingTask TaskName="WriteLinesToFileWithRetry" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Lines ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        var lines = new System.Collections.Generic.List<string>();
        foreach (var line in Lines)
        {
            lines.Add(line.ItemSpec);
        }
        int attempt = 0;
        while (attempt < 3)
        {
            try
            {
                System.IO.File.AppendAllLines(File, lines);
                break;
            }
            catch (System.IO.IOException)
            {
                attempt++;
                System.Threading.Thread.Sleep(1_000);
            }
        }
   ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateCoverageReports" AfterTargets="GenerateCoverageResultAfterTest" Condition=" '$(CollectCoverage)' == 'true' ">
    <ReportGenerator ReportFiles="@(CoverletReport)" ReportTypes="$(ReportGeneratorReportTypes)" Tag="$(Version)" TargetDirectory="$(ReportGeneratorTargetDirectory)" Title="$(AssemblyName)" VerbosityLevel="Warning" />
    <PropertyGroup Condition=" '$(ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(ReportGeneratorMarkdownSummary)') ">
      <_ReportSummaryContent>&lt;details&gt;&lt;summary&gt;:chart_with_upwards_trend: &lt;b&gt;$(AssemblyName) Code Coverage report&lt;/b&gt; %28$(TargetFramework)%29&lt;/summary&gt;</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.IO.File]::ReadAllText('$(ReportGeneratorMarkdownSummary)'))</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)&lt;/details&gt;</_ReportSummaryContent>
    </PropertyGroup>
    <WriteLinesToFileWithRetry Condition=" '$(ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(ReportGeneratorMarkdownSummary)') " ContinueOnError="WarnAndContinue" File="$(GITHUB_STEP_SUMMARY)" Lines="$(_ReportSummaryContent)" />
  </Target>
  <Target Name="SetNuGetPackageOutputs" AfterTargets="Pack" Condition=" '$(GITHUB_OUTPUT)' != '' ">
    <PropertyGroup>
      <_PackageNamesPath>$(ArtifactsPath)\package-names.txt</_PackageNamesPath>
    </PropertyGroup>
    <ReadLinesFromFile File="$(_PackageNamesPath)">
      <Output TaskParameter="Lines" ItemName="_PackageNames" />
    </ReadLinesFromFile>
    <ItemGroup>
      <_PackageNames Include="$(PackageId)" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(_PackageNames)">
      <Output TaskParameter="Filtered" ItemName="_UniquePackageNames" />
    </RemoveDuplicates>
    <PropertyGroup>
      <_UniquePackageNames>@(_UniquePackageNames->'%(Identity)', ',')</_UniquePackageNames>
    </PropertyGroup>
    <WriteLinesToFile File="$(_PackageNamesPath)" Lines="@(_UniquePackageNames)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-names=$(_UniquePackageNames)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-version=$(Version)" />
  </Target>
</Project>
